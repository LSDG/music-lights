[main]

# 'nice' level for the light controller process
;lightProcessNice = 0

# 'nice' level for the sound playback process
;soundProcessNice = 0


[input]

# The number of bytes per sample
;bytes_per_frame_per_channel = 2


[output]

# Whether to use pygame, SFML, or ALSA to play back audio (default: ALSA)
;usePygame = f
;useSFML = f

# Enable debug logging?
;debug = f


[lights]

# Whether to use direct GPIO pins or serial communication to control the lights (default: serial)
;useGPIO = f

# Slow the light state changes down to every 0.05 seconds.
;delayBetweenUpdates = 0.03

# The frequency spectrum slot displayed by each light output channel (controls the number of lights driven)
channelOrder = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31


[spectrum]

# The number of spectrum analyzer bands to produce
frequencyBands = 32

# The number of slices per window
;sliceWindow = 16

# The number of threads FFTW should use to process the signal
;fftThreads = 1

thresholds = .6,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.06,.6
offThresholds = .4,.04,.04,.04,.04,.04,.04,.04,.04,.04,.04,.04,.04,.04,.04,.4

# Enable debug logging?
;debug = f


[serial]

# GPIO pins on the RPi
device = /dev/ttyAMA0

# Serial over the Arduino's USB port
;device = /dev/ttyACM0

# Normal desktop serial port
;device = /dev/ttyS0

# Serial baud rate
;speed = 115200

# Enable debug logging?
;debug = f


[web]

# The address and port of the web server to connect to
;serverAddress = localhost
;serverPort = 8080

# Enable debug logging?
;debug = f
